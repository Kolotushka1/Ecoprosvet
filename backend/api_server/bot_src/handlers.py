import datetime
from dataclasses import dataclass

import aiohttp
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters.command import CommandStart, Command, CommandObject
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
from sqlalchemy import select
from sqlalchemy.orm import Session
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asgiref.sync import sync_to_async

from models import *
from apps.events.models import Tag
from apps.main.models import User, District

r = Router()
base_link = "https://ecoprosvet.karmanow.ru"


@r.message(CommandStart())
async def start(m: Message):
    await m.answer("–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –±–æ—Ç–µ –≠–∫–æ—Å–ø—Ä–æ—Å–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Å–∞–π—Ç",
                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://ecoprosvet.karmanow.ru")]]))


@r.message(Command("my_events"))
async def my_events(m: Message, session: Session):
    user_id = session.scalars(select(User).where(User.telegram_id == m.from_user.id)).one_or_none()
    if not user_id:
        return await m.answer(
            "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Å–∞–π—Ç",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://ecoprosvet.karmanow.ru")]]))
    event_ids = session.scalars(select(UserEvent).where(UserEvent.user_id == user_id)).all()
    events = list()
    for event_id in event_ids:
        event = session.get(Event, event_id.event_id)
        if event.date > datetime.date.today():
            org = session.get(Organization, event.organization_id)
            events.append(f"<b>{event.name}</b> ({event.date.strftime('%d-%m-%Y')}) - {org.name}")
    try:
        user = await sync_to_async(User.objects.filter(telegram_id=m.from_user.id).first)()
    except User.DoesNotExist:
        user = User(telegram_id=m.from_user.id, fio=m.from_user.first_name, name=m.from_user.first_name)
    text = (f"{m.from_user.first_name}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≠–∫–æ–ø—Ä–æ—Å–≤–µ—Ç üòä ! –° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ "
            f"–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö üîî "
            f"–ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º")
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìç –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω", callback_data="set_region")],
            [InlineKeyboardButton(text="‚ú® –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="set_tags")],
        ])
    await m.answer(text=text, reply_markup=reply_markup)


    if events:
        await m.answer(f"–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å:\n\n{'\n'.join(events)}")
    else:
        await m.answer("–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Ç—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –Ω–∏ –≤ –∫–∞–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö")
@dataclass
class DistrictData:
    id: int
    name: str


@dataclass
class TagData:
    id: int
    name: str


@sync_to_async
def get_all_districts():
    districts = District.objects.all()
    return [DistrictData(district.id, district.name) for district in districts]


@sync_to_async
def get_all_tags():
    tags = Tag.objects.all()
    return [TagData(tag.id, tag.name) for tag in tags]


@r.callback_query(lambda c: c.data == 'set_region')
async def set_events(c: CallbackQuery):
    text = '–í –∫–∞–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?'
    districts = await get_all_districts()
    keyboard = InlineKeyboardBuilder()
    for district in districts:
        keyboard.button(text=district.name, callback_data=f'district:{district.id}:')
    await c.
    await c.answer()
